generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String
  password        String?
  googleId        String?          @unique
  role            String           @default("admin")
  permissions     String           @default("[\"read\",\"write\"]")
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  twoFactorEnabled Boolean         @default(false)
  preferences     Preferences?
  plan            Plan?
  auditLogs       AuditLog[]
  organizations   OrganizationMember[]
  apiKeys         ApiKey[]         @relation("UserApiKeys")

  @@map("users")
}

model Preferences {
  id              Int              @id @default(autoincrement())
  userId          Int              @unique
  emailNotifications Boolean       @default(true)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model Plan {
  id              Int              @id @default(autoincrement())
  type            String
  status          String           @default("active")
  expiryDate      DateTime?
  features        Json?
  user            User?            @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("plans")
}

model Transaction {
  id             Int           @id @default(autoincrement())
  transaction_id String        @unique
  user_id        String
  amount         Float
  currency       String
  country        String
  timestamp      DateTime
  flagged        Boolean       @default(false)
  alerts         Alert[]
  organizationId Int
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@map("transactions")
  @@index([organizationId])
  @@index([timestamp])
}

model Alert {
  id             Int          @id @default(autoincrement())
  transaction_id String
  reason         String
  flagged_at     DateTime     @default(now())
  transaction    Transaction  @relation(fields: [transaction_id], references: [transaction_id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("alerts")
  @@index([organizationId])
  @@index([flagged_at])
}

model Watchlist {
  id             Int      @id @default(autoincrement())
  name           String
  type           String   // e.g., "USER", "COUNTRY"
  value          String   // The actual value to match against
  risk_level     String   // e.g., "HIGH", "MEDIUM", "LOW"
  description    String?
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@index([type, value])
}

enum TransactionField {
  amount
  currency
  country
  user_id
  transaction_id

  @@map("transaction_field")
}

enum RuleOperator {
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  EQUAL
  NOT_EQUAL
  IN

  @@map("rule_operator")
}

model Rule {
  id             Int          @id @default(autoincrement())
  rule_name      String
  field           TransactionField
  operator        RuleOperator
  value           String
  organizationId  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]

  @@unique([rule_name, organizationId])
  @@map("rules")
}

model AuditLog {
  id              Int              @id @default(autoincrement())
  userId          Int
  organizationId  Int
  action          String
  createdAt       DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Organization {
  id              Int              @id @default(autoincrement())
  name            String
  createdAt       DateTime         @default(now())
  members         OrganizationMember[]
  rules           Rule[]
  alerts          Alert[]
  transactions    Transaction[]
  watchlist       Watchlist[]
  auditLogs       AuditLog[]
  status          String           @default("active")
  settings        Json?
  apiKeys         ApiKey[]         @relation("OrganizationApiKeys")
  channels        Channel[]

  @@map("organizations")
}

model ApiKey {
  id              Int              @id @default(autoincrement())
  key             String           @unique
  organizationId  Int?
  createdBy       Int
  createdAt       DateTime         @default(now())
  expiresAt       DateTime
  status          String           @default("active")

  organization    Organization?    @relation("OrganizationApiKeys", fields: [organizationId], references: [id], onDelete: Cascade)
  user            User             @relation("UserApiKeys", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model OrganizationMember {
  id              Int              @id @default(autoincrement())
  organizationId  Int
  userId          Int
  role            String           @default("member")
  joinedAt        DateTime         @default(now())
  permissions     String           @default("[]")
  status          String           @default("active")
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
  @@map("organization_members")
}

model Channel {
  id              Int              @id @default(autoincrement())
  channelId       String           @unique
  channelType     String           // e.g., "slack", "webhook", "email"
  name            String
  config          Json?            // Store channel-specific config (webhook URL, tokens, etc.)
  status          String           @default("active")
  organizationId  Int
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([organizationId])
  @@index([channelType])
  @@map("channels")
}

model Subscription {
  id              Int              @id @default(autoincrement())
  channelId       Int
  ruleId          Int
  enabled         Boolean          @default(true)
  channel         Channel          @relation(fields: [channelId], references: [id], onDelete: Cascade)
  rule            Rule             @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([channelId, ruleId])
  @@index([channelId])
  @@index([ruleId])
  @@map("subscriptions")
}
